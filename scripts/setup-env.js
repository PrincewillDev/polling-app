#!/usr/bin/env node

import { writeFileSync, existsSync } from "fs";
import { join, dirname } from "path";
import { createInterface } from "readline";
import { randomBytes } from "crypto";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const rl = createInterface({
  input: process.stdin,
  output: process.stdout,
});

function generateSecret() {
  return randomBytes(32).toString("base64");
}

function question(query) {
  return new Promise((resolve) => rl.question(query, resolve));
}

async function setupEnvironment() {
  console.log("🚀 Polling App Environment Setup");
  console.log("================================\n");

  const envPath = join(__dirname, "..", ".env.local");
  console.log(`Attempting to create .env.local at: ${envPath}`);

  // Check if .env.local already exists
  if (existsSync(envPath)) {
    console.log("⚠️  .env.local already exists!");
    const overwrite = await question("Do you want to overwrite it? (y/N): ");
    if (overwrite.toLowerCase() !== "y" && overwrite.toLowerCase() !== "yes") {
      console.log("Setup cancelled.");
      rl.close();
      return;
    }
  }

  console.log("Choose your setup option:");
  console.log("1. Supabase Cloud (Recommended for production)");
  console.log("2. Local Supabase (For development)");
  console.log("3. Manual configuration\n");

  const choice = await question("Enter your choice (1-3): ");

  let config = {};

  switch (choice) {
    case "1":
      console.log("\n📡 Supabase Cloud Setup");
      console.log("Go to https://supabase.com and create a new project.");
      console.log("Then go to Settings → API to get your credentials.\n");

      config.NEXT_PUBLIC_SUPABASE_URL = await question(
        "Enter your Supabase URL: ",
      );
      config.NEXT_PUBLIC_SUPABASE_ANON_KEY = await question(
        "Enter your Supabase Anon Key: ",
      );
      config.SUPABASE_SERVICE_ROLE_KEY = await question(
        "Enter your Supabase Service Role Key: ",
      );
      break;

    case "2":
      console.log("\n🏠 Local Supabase Setup");
      console.log("Using local development credentials...\n");

      config.NEXT_PUBLIC_SUPABASE_URL = "http://127.0.0.1:54321";
      config.NEXT_PUBLIC_SUPABASE_ANON_KEY =
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0";
      config.SUPABASE_SERVICE_ROLE_KEY =
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU";

      console.log("✅ Local Supabase credentials configured.");
      console.log(
        'Make sure to run "supabase start" before starting your app.\n',
      );
      break;

    case "3":
      console.log("\n⚙️  Manual Configuration");
      console.log("Please edit .env.local manually with your values.\n");
      break;

    default:
      console.log("Invalid choice. Exiting...");
      rl.close();
      return;
  }

  // Common configuration
  config.NEXTAUTH_URL =
    (await question("Enter your app URL (default: http://localhost:3000): ")) ||
    "http://localhost:3000";
  config.APP_URL = config.NEXTAUTH_URL;
  config.NODE_ENV = "development";

  // Generate NextAuth secret
  console.log("\n🔐 Generating NextAuth secret...");
  config.NEXTAUTH_SECRET = generateSecret();

  // Optional configurations
  console.log("\n📊 Optional Features (press Enter to skip):");
  const analyticsId = await question("Analytics ID (optional): ");
  if (analyticsId) config.ANALYTICS_ID = analyticsId;

  const sentryDsn = await question(
    "Sentry DSN for error tracking (optional): ",
  );
  if (sentryDsn) config.SENTRY_DSN = sentryDsn;

  const openaiKey = await question(
    "OpenAI API Key for AI features (optional): ",
  );
  if (openaiKey) config.OPENAI_API_KEY = openaiKey;

  // Build .env.local content
  let envContent = "# Polling App Environment Configuration\n";
  envContent +=
    "# Generated by setup script on " + new Date().toISOString() + "\n\n";

  envContent += "# Supabase Configuration\n";
  envContent += `NEXT_PUBLIC_SUPABASE_URL=${config.NEXT_PUBLIC_SUPABASE_URL}\n`;
  envContent += `NEXT_PUBLIC_SUPABASE_ANON_KEY=${config.NEXT_PUBLIC_SUPABASE_ANON_KEY}\n`;
  envContent += `SUPABASE_SERVICE_ROLE_KEY=${config.SUPABASE_SERVICE_ROLE_KEY}\n\n`;

  envContent += "# Next.js Configuration\n";
  envContent += `NEXTAUTH_URL=${config.NEXTAUTH_URL}\n`;
  envContent += `NEXTAUTH_SECRET=${config.NEXTAUTH_SECRET}\n\n`;

  envContent += "# App Configuration\n";
  envContent += `APP_URL=${config.APP_URL}\n`;
  envContent += `NODE_ENV=${config.NODE_ENV}\n`;

  if (config.ANALYTICS_ID || config.SENTRY_DSN || config.OPENAI_API_KEY) {
    envContent += "\n# Optional Features\n";
    if (config.ANALYTICS_ID)
      envContent += `ANALYTICS_ID=${config.ANALYTICS_ID}\n`;
    if (config.SENTRY_DSN) envContent += `SENTRY_DSN=${config.SENTRY_DSN}\n`;
    if (config.OPENAI_API_KEY)
      envContent += `OPENAI_API_KEY=${config.OPENAI_API_KEY}\n`;
  }

  // Write .env.local file
  try {
    writeFileSync(envPath, envContent);
    console.log("\n✅ Successfully created .env.local file!");

    // Show next steps
    console.log("\n📋 Next Steps:");

    if (choice === "1") {
      console.log("1. Make sure your Supabase project is ready");
      console.log("2. Run: supabase link --project-ref YOUR_PROJECT_REF");
      console.log("3. Run: supabase db push");
    } else if (choice === "2") {
      console.log("1. Run: supabase start");
      console.log("2. Run: supabase db reset");
    }

    console.log(
      `${choice === "1" || choice === "2" ? "4" : "1"}. Run: npm run dev`,
    );
    console.log(
      `${choice === "1" || choice === "2" ? "5" : "2"}. Visit: ${config.NEXTAUTH_URL}`,
    );

    console.log("\n🎉 Your polling app is ready to go!");
  } catch (error) {
    console.error("\n❌ Error creating .env.local file:", error.message);
  }

  rl.close();
}

// Run the setup
setupEnvironment().catch((error) => {
  console.error("Setup failed:", error);
  process.exit(1);
});
